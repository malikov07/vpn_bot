import asyncio
import logging
import sys
from os import getenv
from dotenv import load_dotenv
load_dotenv()

from aiogram import Bot, Dispatcher, html,F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums.chat_member_status import ChatMemberStatus
from customkeyboards import main_menu_keyboard,get_server_location_keyboard,get_account_menu_keyboard,get_device_keyboard,get_help_keyboard,get_referral_keyboard,get_create_bot_keyboard
from subscription import is_user_subscribed,subs_chan_keyboard

# Bot token can be obtained via https://t.me/BotFather
TOKEN = getenv("BOT_TOKEN")

# All handlers should be attached to the Router (or Dispatcher)

dp = Dispatcher()



@dp.message(CommandStart())
async def command_start_handler(message: Message, bot:Bot) -> None:
    """
    This handler receives messages with `/start` command
    """

    if await is_user_subscribed(message.from_user.id,bot):
        await message.answer(f"{html.bold('–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Å –Ω–∞–º–∏!')}\n\n–ú—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –Ω–∞–¥—ë–∂–Ω—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å VPN –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π, –∞ –≤—ã ‚Äî –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
                            , reply_markup=main_menu_keyboard())
    else:
        await force_subscription(message,bot)


async def force_subscription(message: Message, bot:Bot):
    await message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è! üòá", reply_markup=subs_chan_keyboard().as_markup())

@dp.callback_query(F.data.in_({"check_subs"}))
async def check_subs(callback: CallbackQuery, bot:Bot ):
    if await is_user_subscribed(callback.from_user.id, bot):
        await callback.message.answer(f"{html.bold('–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Å –Ω–∞–º–∏!')}\n\n–ú—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –Ω–∞–¥—ë–∂–Ω—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å VPN –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π, –∞ –≤—ã ‚Äî –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
                            , reply_markup=main_menu_keyboard())
        await callback.message.delete()
        await callback.answer()
    else:
        await callback.answer("You are not subscribed to all chanels", show_alert=True)

@dp.callback_query()
async def callback_handler(callback: CallbackQuery, bot:Bot):
    if callback.data == "tariffs":
        kb = get_server_location_keyboard()
        text = "üåê –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:\n\n‚ùóÔ∏è‚ùì <b>–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ?</b>"
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    elif callback.data == "my_account":
        kb = get_account_menu_keyboard()
        user_id = callback.from_user.id
        bot_id = (await bot.me()).id
        balance = "0‚ÇΩ"  # You can replace this with actual balance from DB

        text = (
            "<b>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>\n\n"
            f"ü™™ <b>–í–∞—à ID:</b> <code>{user_id}</code>\n"
            f"ü§ñ <b>ID –±–æ—Ç–∞:</b> <code>{bot_id}</code>\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance}"
        )
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    elif callback.data == "instruction":
        await callback.message.edit_text("‚ö° –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", reply_markup=get_device_keyboard())
    elif callback.data == "help":
        await callback.message.edit_text("üÜò –ü–æ–º–æ—â—å", reply_markup=get_help_keyboard())
    elif callback.data == "partner":
        referral_link = f"https://t.me/TunnelFoxRobot"
        text = (
            "ü§ù <b>–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ <b>3 –¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!\n"
            "–ö—Ä–æ–º–µ —ç—Ç–æ–≥–æ, –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å <b>30.0%</b> –æ—Ç –≤—Å–µ—Ö –∏—Ö –ø–æ–∫—É–ø–æ–∫!\n\n"
            "<b>–£—Å–ª–æ–≤–∏—è:</b>\n"
            "1. –ß–µ–ª–æ–≤–µ–∫ —Ä–∞–Ω–µ–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞\n"
            "2. –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ VPN –∏–ª–∏ –æ–ø–ª–∞—Ç–∏–ª\n\n"
            "üë®‚Äçüíª <b>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–æ–≤</b>\n"
            "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –∫–∞–∂–¥—ã–π –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª!\n\n"
            "üéÅ <b>–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏:</b> 0\n"
            "üìÜ <b>–ë–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π:</b> 0\n\n"
            f"üîó <b>–í–∞—à–∞ –ø—Ä–∏–≥–ª–∞—à–∞—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{referral_link}</code>\n"
            "*–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
        )
        await callback.message.edit_text(text, reply_markup=get_referral_keyboard(), parse_mode="HTML")
    elif callback.data == "create_bot":
        text = (
            "ü§ñ <b>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ Telegram-–±–æ—Ç–∞ –∑–∞ 5 –º–∏–Ω—É—Ç –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!</b>\n\n"
            "‚ö° <b>–°—Ç–∞–Ω—å—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ IT-–±–∏–∑–Ω–µ—Å–∞</b> ‚Äî —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞ –±–µ–∑ –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏.\n"
            "–ú—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Ç–µ—Ö–Ω–∏–∫—É.\n\n"
            "üõ† <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</b>\n"
            "1. –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ø–æ–¥–ø–∏—Å–∫–∏, –¥–æ—Ö–æ–¥\n"
            "3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n"
            "4. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "5. –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ BotStat.io\n"
            "6. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SubGram\n\n"
            "‚ùì <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
            "1. –°–æ–∑–¥–∞—ë—à—å VPN-–±–æ—Ç–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ\n"
            "2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—à—å –Ω–∞—Ü–µ–Ω–∫—É\n"
            "3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç ‚Äî –Ω–∞—Ü–µ–Ω–∫–∞ –∫ —Ç–µ–±–µ\n"
            "üíµ –í—ã–≤–æ–¥ –≤ —Ä—É–±–ª—è—Ö –∏–ª–∏ USDT\n\n"
            "üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –Ω–∞ –Ω–∞—Å. –î–æ—Ö–æ–¥ ‚Äî —Ç–µ–±–µ.</b>\n"
            "–¢—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
            "üß© <b>–î–≤–µ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b>\n"
            "‚Äî <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è:</b> 30% —Å –∫–∞–∂–¥–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ\n"
            "‚Äî <b>–î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–æ–≤:</b> –¥–æ 100% —Å –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Ç–≤–æ–π –∫–ª–∏–µ–Ω—Ç"
        )
        await callback.message.edit_text(text, reply_markup=get_create_bot_keyboard(), parse_mode="HTML")
    elif callback.data == "back_to_menu":
        text = f"{html.bold('–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Å –Ω–∞–º–∏!')}\n\n–ú—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –Ω–∞–¥—ë–∂–Ω—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å VPN –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π, –∞ –≤—ã ‚Äî –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
                            
        await callback.message.edit_text(text, reply_markup = main_menu_keyboard())
    

    await callback.answer()

async def main() -> None:
    # Initialize Bot instance with default bot properties which will be passed to all API calls
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())